{
	"Print to stdout": {
		"prefix": "cout",
		"body": [
			"std::cout << $0 << std::endl;",
		],
	},
	"Print to stderr": {
		"prefix": "cerr",
		"body": [
			"std::cerr << $0 << std::endl;",
		],
	},
	"std::string": {
		"prefix": "ss",
		"body": [
			"std::string ${1:str}",
		],
	},
	"comment": {
		"prefix": "/**",
		"body": [
			"/**",
			" * ${1:?} $0",
			" */",
		],
	},
	"include std header": {
		"prefix": "include",
		"body": [
			"#include <${1:iostream}>",
		],
	},
	"include perso header": {
		"prefix": "include",
		"body": [
			"#include \"$1.hpp\"",
		],
	},
	"template": {
		"prefix": "template",
		"body": [
			"template <typename ${1:T}>",
		],
	},
	"class": {
		"prefix": "class",
		"body": [
			"class ${1:NAME} ${2:: public PARENT} {",
			"    public:",
			"        ${1:NAME}();",
			"        ~${1:NAME}();",
			"        $0",
			"    protected:",
			"    private:",
			"};",
		],
	},
	"main": {
		"prefix": "main",
		"body": [
			"int main(${1:int ac, char *av[]})",
			"{",
			"    $0",
			"    return 0;",
			"}",
		],
	},
	"try catch block": {
		"prefix": "try",
		"body": [
			"try {",
			"    $0",
			"} catch (const ${1:std::exception} &e) {",
			"    std::cerr << e.what() << std::endl;",
			"}",
		],
	},
	"if": {
		"prefix": "if",
		"body": [
			"if ($1) {",
			"    $0",
			"}",
		],
	},
	"else": {
		"prefix": "else",
		"body": [
			"else {",
			"    $0",
			"}",
		],
	},
	"while": {
		"prefix": "while",
		"body": [
			"while ($1) {",
			"    $0",
			"}",
		],
	},
	"for": {
		"prefix": "for",
		"body": [
			"for (${1:size_t i = 0}; ${2:i < 0}; ${3:i++}) {",
			"    $0",
			"}",
		],
	},
	"for range": {
		"prefix": "for",
		"body": [
			"for (auto &&${1:i} : ${2:v}) {",
			"    $0",
			"}",
		],
	},
	"for tab": {
		"prefix": "for",
		"body": [
			"for (${1:size_t i = 0}; ${2:tab} && ${2:tab}[i]; ${3:i++}) {",
			"    $0",
			"}",
		],
	},
	"for list": {
		"prefix": "for",
		"body": [
			"for (${1:auto tmp = ${2:list}}; ${2:list} && ${2:list->next}; ${3:tmp = tmp->next}) {",
			"    $0",
			"}",
		],
	},
	"switch": {
		"prefix": "switch",
		"body": [
			"switch (${1:var}) {",
			"    case $0: break;",
			"}",
		],
	},
	"const reference": {
        "prefix": "cr",
        "body": [
            "const ${1:int} &${2:_var}",
        ],
        "description": "const type reference"
	},
	"attribute unused": {
        "prefix": "unused",
        "body": [
            "__attribute__((unused))",
        ],
    },
}